#!/usr/bin/env python3
"""
Script de Deploy Automatizado para Sistema JAM
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_command(command, description):
    """Executa um comando e mostra o progresso"""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Conclu√≠do!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro em {description}: {e}")
        print(f"Erro: {e.stderr}")
        return False

def create_production_files():
    """Cria arquivos necess√°rios para produ√ß√£o"""
    print("\nüìÅ Criando arquivos de produ√ß√£o...")
    
    # Criar diret√≥rio static se n√£o existir
    static_dir = Path("static")
    static_dir.mkdir(exist_ok=True)
    
    # Criar diret√≥rio logs se n√£o existir
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    
    # Criar arquivo .htaccess para Apache
    htaccess_content = """
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ /index.py/$1 [QSA,L]

# Configura√ß√µes de seguran√ßa
<Files "db.sqlite3">
    Order allow,deny
    Deny from all
</Files>

<Files "*.py">
    Order allow,deny
    Deny from all
</Files>

# Permitir apenas arquivos est√°ticos
<FilesMatch "\\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$">
    Order allow,deny
    Allow from all
</FilesMatch>
"""
    
    with open(".htaccess", "w", encoding="utf-8") as f:
        f.write(htaccess_content)
    
    print("‚úÖ Arquivos de produ√ß√£o criados!")

def collect_static():
    """Coleta arquivos est√°ticos"""
    return run_command(
        "python manage.py collectstatic --noinput",
        "Coletando arquivos est√°ticos"
    )

def make_migrations():
    """Executa migra√ß√µes"""
    return run_command(
        "python manage.py makemigrations",
        "Criando migra√ß√µes"
    )

def migrate():
    """Aplica migra√ß√µes"""
    return run_command(
        "python manage.py migrate",
        "Aplicando migra√ß√µes"
    )

def create_superuser():
    """Cria superusu√°rio se n√£o existir"""
    print("\nüë§ Verificando superusu√°rio...")
    
    # Verificar se j√° existe superusu√°rio
    try:
        result = subprocess.run(
            "python manage.py shell -c \"from django.contrib.auth.models import User; print('Superusu√°rio existe' if User.objects.filter(is_superuser=True).exists() else 'N√£o existe')\"",
            shell=True, capture_output=True, text=True
        )
        
        if "N√£o existe" in result.stdout:
            print("‚ö†Ô∏è  N√£o foi encontrado superusu√°rio.")
            print("üìù Para criar um superusu√°rio, execute:")
            print("   python manage.py createsuperuser")
        else:
            print("‚úÖ Superusu√°rio j√° existe!")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao verificar superusu√°rio: {e}")

def main():
    """Fun√ß√£o principal do deploy"""
    print("üöÄ INICIANDO DEPLOY DO SISTEMA JAM")
    print("=" * 50)
    
    # Verificar se estamos no diret√≥rio correto
    if not Path("manage.py").exists():
        print("‚ùå Erro: execute este script no diret√≥rio raiz do projeto (onde est√° manage.py)")
        sys.exit(1)
    
    # Passos do deploy
    steps = [
        ("Criando arquivos de produ√ß√£o", create_production_files),
        ("Coletando arquivos est√°ticos", collect_static),
        ("Criando migra√ß√µes", make_migrations),
        ("Aplicando migra√ß√µes", migrate),
    ]
    
    # Executar passos
    for step_name, step_func in steps:
        if not step_func():
            print(f"\n‚ùå Deploy falhou em: {step_name}")
            sys.exit(1)
    
    # Verificar superusu√°rio
    create_superuser()
    
    print("\n" + "=" * 50)
    print("üéâ DEPLOY CONCLU√çDO COM SUCESSO!")
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("1. Fa√ßa upload dos arquivos para o servidor FTP")
    print("2. Configure o servidor web (Apache/Nginx)")
    print("3. Crie um superusu√°rio se necess√°rio:")
    print("   python manage.py createsuperuser")
    print("4. Acesse o sistema em: https://sistemajam.com.br")
    print("\nüîß CONFIGURA√á√ïES DO SERVIDOR:")
    print("   - Host: ftp.sistemajam.com.br")
    print("   - Usu√°rio: sistemajam")
    print("   - Senha: SistemaJam2024!")
    print("   - Diret√≥rio: /public_html/")

if __name__ == "__main__":
    main() 